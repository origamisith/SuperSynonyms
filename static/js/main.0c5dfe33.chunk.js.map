{"version":3,"sources":["apiKey.js","ListItem.js","App.js","index.js"],"names":["text","key","ListItem","props","fetchDefinition","setState","loading","fetch","word","apiKey","then","response","json","definitions","Array","from","console","log","state","catch","err","this","Container","className","map","partOfSpeech","definition","Component","App","maxChars","handleSubmitWord","e","preventDefault","failed","synonyms","results","length","handleWordChange","target","value","fluid","Row","Col","onSubmit","Form","class","as","xs","Control","placeholder","variant","type","name","onChange","Button","aria-hidden","lg","tooltip","min","max","filter","synonym","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c5dfe33.chunk.js","sourcesContent":["let text = {key: \"68520c2048msh27e0c5d596e08d9p15547cjsn480fd9da4606\"}\nexport default text;\n","import './ListItem.css';\nimport {Component} from \"react\";\nimport apiKey from './apiKey';\nimport {Container, Col, Form, Button, Row } from 'react-bootstrap';\nimport Loader from \"react-spinners/PacmanLoader\"\n\nclass ListItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            word: '',\n            loading: false\n        }\n    }\n    componentDidMount() {\n        this.fetchDefinition()\n    }\n\n    fetchDefinition = () => {\n        this.setState({loading: true}, ()=>{\n        fetch(\"https://wordsapiv1.p.rapidapi.com/words/\" + this.props.word + \"/definitions\", {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": apiKey.key,\n                \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n            }\n        })\n            .then(response => response.json())\n            .then(response => {\n                this.setState({\n                    definitions: Array.from(response.definitions),\n                    loading: false\n                });\n                console.log(this.state.definitions + \" are the definitions\");\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className = \"Item\">\n                    <h2 className=\"Header\">{this.props.word}</h2>\n                    <Loader loading = {this.state.loading}/>\n                    {this.state.definitions? this.state.definitions.map(word => <h4>{word.partOfSpeech}: {word.definition}</h4>) : ''}\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default ListItem\n","// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Col, Form, Button, Row } from 'react-bootstrap';\nimport {Component} from \"react\";\nimport apiKey from './apiKey';\nimport ListItem from \"./ListItem\";\nimport Loader from \"react-spinners/PacmanLoader\"\nimport RangeSlider from 'react-bootstrap-range-slider'\nimport { css } from \"@emotion/core\"\n// const override = css`\n//     display: block\n//     margin: 0 auto;\n//     border-color: red;\n// `;\n\nclass App extends Component {\n    state = {\n        word: '',\n        loading: false,\n        maxChars: 15,\n    };\n\n    handleSubmitWord = (e) => {\n        this.setState({loading: true }, () => {\n            e.preventDefault();\n\n            if (!this.state.word) return;\n\n            // read all entities\n            fetch(\"https://wordsapiv1.p.rapidapi.com/words/\" + this.state.word + \"/synonyms\", {\n                \"method\": \"GET\",\n                \"headers\": {\n                    \"x-rapidapi-key\": apiKey.key,\n                    \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n                }\n            })\n                .then(response => response.json())\n                .then(response => {\n                    this.setState({\n                        failed: !response.synonyms,\n                        synonyms: response.synonyms ? Array.from(response.synonyms) : '',\n                        loading: false,\n                        results: response.synonyms.length\n                    });\n                    console.log(response);\n                })\n                .catch(err => {\n                    console.log(err)\n                });\n        });\n    }\n\n    handleWordChange = (e) => {\n        this.setState({word: e.target.value});\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Container className=\"firstrow\" fluid >\n                    <Row className = \"nav\">\n                        <Col className=\"navbar-text\"> Super Synonyms</Col>\n                    </Row>\n                </Container>\n\n                <Container className = \"secondrow\">\n                    <form onSubmit={this.handleSubmitWord}>\n                        <Form class=\"justify-content-center\" as={Row} className = \"Form\" onSubmit={this.handleSubmitWord}>\n                            <Col xs={6} className = \"enter\">\n                                <Form.Control placeholder=\"Enter a word\" variant=\"primary\" type=\"text\" name=\"word\" onChange = {this.handleWordChange}/>\n                            </Col>\n                            <Col xs={1} class=\"text-left\">\n                                <Button variant = \"primary\" type=\"submit\" ><i className=\"fa fa-search\" aria-hidden=\"true\"/>\n                                </Button>\n                            </Col>\n                            <Col lg={5} className = \"slider\">\n                                <Row className = \"sliderTitle\">\n                                Maximum Word Length\n                                </Row>\n                                <Row>\n                                <RangeSlider value = {this.state.maxChars} tooltip='on' min = '2' max = '20'\n                                             onChange = {e => this.setState(\n                                                 {maxChars: e.target.value,\n                                                     results: this.state.synonyms.filter(word => word.length <= e.target.value).length}\n                                             )}/>\n                                </Row>\n                            </Col>\n                        </Form>\n                    </form>\n                    <Row className=\"results\">\n                        {this.state.results? \"Showing \" + this.state.results + \" results\": \"\"}\n                    </Row>\n                </Container>\n                <Container>\n                    <Row>\n                        <Loader loading = {this.state.loading}/>\n                        {this.state.synonyms? this.state.synonyms\n                            .filter(word => word.length <= this.state.maxChars)\n                            .map((synonym) => <ListItem key = {synonym} word = {synonym}/>) : ''}\n                        {this.state.failed === true ? <h1>No synonyms found</h1> : ''}\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}