{"version":3,"sources":["apiKey.js","ListItem.js","App.js","index.js"],"names":["text","key","ListItem","props","fetchDefinition","fetch","word","apiKey","then","response","json","setState","definitions","Array","from","catch","err","console","log","state","this","map","partOfSpeech","definition","Component","App","handleSubmitWord","e","preventDefault","target","value","failed","synonyms","handleWordChange","className","Form","onSubmit","Label","Control","variant","type","name","onChange","Button","synonym","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QACeA,EADJ,CAACC,IAAK,sD,OCqCFC,E,kDAjCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,gBAAkB,WACdC,MAAM,2CAA4C,EAAKF,MAAMG,KAAO,eAAgB,CAChF,OAAU,MACV,QAAW,CACP,iBAAkBC,EAAON,IACzB,kBAAmB,+BAGtBO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,EAAKE,SAAS,CAACC,YAAaC,MAAMC,KAAKL,EAASG,kBAGnDG,OAAM,SAAAC,GAASC,QAAQC,IAAIF,OAjBhC,EAAKG,MAAQ,CAACb,KAAM,IACpB,EAAKF,kBAHU,E,0CAuBnB,WACI,OACI,gCACI,6BAAKgB,KAAKjB,MAAMG,OACfc,KAAKD,MAAMP,YAAaQ,KAAKD,MAAMP,YAAYS,KAAI,SAAAf,GAAI,OAAI,+BAAKA,EAAKgB,aAAV,KAA0BhB,EAAKiB,iBAAoB,U,GA5BxGC,aC2DRC,E,4MArDXN,MAAQ,CACJb,KAAM,I,EAGVoB,iBAAmB,SAACC,GAChBA,EAAEC,iBAEFX,QAAQC,IAAIS,EAAEE,OAAOC,OACjB,EAAKX,MAAMb,MAGfD,MAAM,2CAA4C,EAAKc,MAAMb,KAAO,YAAa,CAC7E,OAAU,MACV,QAAW,CACP,iBAAkBC,EAAON,IACzB,kBAAmB,+BAGtBO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,EAAKE,SAAS,CAACoB,QAAStB,EAASuB,WACjC,EAAKrB,SAAS,CAACqB,SAAUvB,EAASuB,SAAWnB,MAAMC,KAAKL,EAASuB,UAAY,QAGhFjB,OAAM,SAAAC,GAASC,QAAQC,IAAIF,O,EAIpCiB,iBAAmB,SAACN,GAChB,EAAKhB,SAAS,CAACL,KAAMqB,EAAEE,OAAOC,S,4CAIlC,WACI,OACI,sBAAKI,UAAU,MAAf,UACI,qBAAKA,UAAY,MAAjB,SACI,mDAEJ,eAACC,EAAA,EAAD,CAAMC,SAAUhB,KAAKM,iBAArB,UACI,eAACS,EAAA,EAAKE,MAAN,mBAEI,cAACF,EAAA,EAAKG,QAAN,CAAcC,QAAQ,UAAUC,KAAK,OAAOC,KAAK,OAAOC,SAAYtB,KAAKa,sBAE7E,cAACU,EAAA,EAAD,CAAQJ,QAAU,UAAUC,KAAK,SAASV,MAAM,cAEnDV,KAAKD,MAAMa,SAAUZ,KAAKD,MAAMa,SAASX,KAAI,SAACuB,GAAD,OAAa,cAAC,EAAD,CAAUtC,KAAQsC,OAAc,IACpE,IAAtBxB,KAAKD,MAAMY,OAAkB,qDAA+B,U,GAhD3DP,aCHlBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.afcd14dd.chunk.js","sourcesContent":["let text = {key: \"68520c2048msh27e0c5d596e08d9p15547cjsn480fd9da4606\"}\nexport default text;\n","import {Component} from \"react\";\nimport apiKey from './apiKey';\n\nclass ListItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {word: ''}\n        this.fetchDefinition();\n    }\n\n    fetchDefinition = () => {\n        fetch(\"https://wordsapiv1.p.rapidapi.com/words/\"+ this.props.word + \"/definitions\", {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": apiKey.key,\n                \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n            }\n        })\n            .then(response => response.json())\n            .then(response => {\n                this.setState({definitions: Array.from(response.definitions)});\n                // console.log(response + \", \" + response.synonyms);\n            })\n            .catch(err => { console.log(err)\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.props.word}</h1>\n                {this.state.definitions? this.state.definitions.map(word => <h2>{word.partOfSpeech}: {word.definition}</h2>) : ''}\n            </div>\n        );\n    }\n}\n\nexport default ListItem\n","// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Button } from 'react-bootstrap';\nimport {Component} from \"react\";\nimport apiKey from './apiKey';\nimport ListItem from \"./ListItem\";\n\nclass App extends Component {\n    state = {\n        word: ''\n    };\n\n    handleSubmitWord = (e) => {\n        e.preventDefault();\n\n        console.log(e.target.value);\n        if(!this.state.word) return;\n\n        // read all entities\n        fetch(\"https://wordsapiv1.p.rapidapi.com/words/\"+ this.state.word + \"/synonyms\", {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": apiKey.key,\n                \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n            }\n        })\n            .then(response => response.json())\n            .then(response => {\n                this.setState({failed: !response.synonyms})\n                this.setState({synonyms: response.synonyms ? Array.from(response.synonyms) : ''})\n                // console.log(response + \", \" + response.synonyms);\n            })\n            .catch(err => { console.log(err)\n            });\n    }\n\n    handleWordChange = (e) => {\n        this.setState({word: e.target.value});\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className = \"nav\">\n                    <h1>Superb Synonyms</h1>\n                </div>\n                <Form onSubmit={this.handleSubmitWord}>\n                    <Form.Label>\n                        Word:\n                        <Form.Control variant=\"primary\" type=\"text\" name=\"word\" onChange = {this.handleWordChange}/>\n                    </Form.Label>\n                    <Button variant = \"primary\" type=\"submit\" value=\"Submit\" />\n                </Form>\n                {this.state.synonyms? this.state.synonyms.map((synonym) => <ListItem word = {synonym}/>) : ''}\n                {this.state.failed === true ? <h1>k No synonyms found</h1> : ''}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}